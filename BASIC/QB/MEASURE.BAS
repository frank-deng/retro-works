DEFINT A-Z

DATA &H50,&H53,&H51,&H52,&H55,&H56,&H57,&H1E,&H6,&HBE,&H0,&H0,&HB8,&H0,&H0
DATA &H2E,&H89,&H36,&H58,&H1,&H2E,&HA3,&H5A,&H1,&H8E,&HD8,&HB9,&H9,&H0,&HFF
DATA &H34,&H83,&HC6,&H2,&HE2,&HF9,&H7,&H1F,&H5F,&H5E,&H5D,&H5A,&H59,&H5B,&H58
DATA &HCD,&H0,&H9C,&H6,&H1E,&H57,&H56,&H55,&H52,&H51,&H53,&H50,&H2E,&HA1,&H5A
DATA &H1,&H8E,&HD8,&H2E,&H8B,&H36,&H58,&H1,&HB9,&HA,&H0,&H8F,&H4,&H83,&HC6,&H2
DATA &HE2,&HF9,&H7,&H1F,&H5F,&H5E,&H5D,&H5A,&H59,&H5B,&H58,&HCB
DATA &H0,&H0,&H0,&H0,&H0
DATA &H1E,&H6,&H56,&H57,&H50,&HBE,&H0,&H0,&HB8,&H0,&H0,&H8E,&HD8,&HBF,&H0,&H0,&HB8,&H0,&H0,&H8E,&HC0,&H53,&H51,&H52,&H8B,&H44,&H2,&H2E,&HA3,&H56,&H1,&H8B
DATA &H54,&H6,&H8A,&H44,&H8,&H8B,&H4C,&H4,&H8B,&H1C,&HB4,&H80,&H50,&H26,&H22,&H25,&H74,&H4,&HB4,&HC,&HCD,&H10,&H58,&H4B,&H74,&HB,&H41,&H80,&HFC,&H1,&H75,&H1
DATA &H47,&HD0,&HCC,&HEB,&HE7,&H47,&H42,&H83,&H6C,&H2,&H1,&H75,&HD8,&H5A,&H59,&H5B,&H58,&H5F,&H5E,&H7,&H1F,&HCB,&H0,&H0

TYPE REGSTYPE
  AX AS INTEGER
  BX AS INTEGER
  CX AS INTEGER
  DX AS INTEGER
  BP AS INTEGER
  SI AS INTEGER
  DI AS INTEGER
  DS AS INTEGER
  ES AS INTEGER
  FLAGS AS INTEGER
END TYPE
DECLARE SUB INTX(N AS INTEGER,REGS AS REGSTYPE)
DECLARE SUB INITENV()
DIM SHARED ASMINTX(47),ASMDRAW(44)

TYPE FontDataT
    CH0 AS STRING * 1
    CH1 AS STRING * 1
    FONT AS INTEGER
    W AS INTEGER
    H AS INTEGER
    TOP AS INTEGER
    BOTTOM AS INTEGER
    ATTR AS INTEGER
    BUFLEN AS INTEGER
END TYPE
TYPE DrawBitmapT
    W AS INTEGER
    H AS INTEGER
    X AS INTEGER
    Y AS INTEGER
    C AS STRING*1
END TYPE
DIM SHARED BITMAP(8194) AS INTEGER

COMMON SHARED REGS AS REGSTYPE
COMMON SHARED W,H,FASC,FHZK,ATTR,XADJ,MSTR AS STRING

CALL INITENV
CALL MainLoop
CLS:END

SUB MainLoop
  STATIC RUNNING AS INTEGER
  MSTR="Sample Text，范例文本"
  W=12: H=24: FASC=0: FHZK=0: ATTR=1: XADJ=0
  RUNNING=1
  DO
    CLS
    RES=0: CALL MeasureAndDrawStr(MSTR,RES,W,H,FASC,FHZK,ATTR,XADJ)
    LOCATE 25,1:PRINT "字符串长度：";RES;"px";
    LOCATE 1,1:PRINT "0.内容：";MSTR
    PRINT "1.字符宽度：";W;"px";TAB(25);
    PRINT "2.字符高度：";H;"px";TAB(50);
    PRINT "3.西文字体：";FASC
    PRINT "4.中文字体：";FHZK;TAB(25);
    PRINT "5.字符属性：";ATTR;TAB(50);
    PRINT "6.字距调整：";XADJ;"px"
    PRINT "按0-6选择要修改的项目，按Esc或q退出。";
    K$="": DO: K$=INPUT$(1): LOOP WHILE K$=""
    PRINT "":PRINT ""
    SELECT CASE K$
      CASE CHR$(27)
        RUNNING=0
      CASE "q"
        RUNNING=0
      CASE "Q"
        RUNNING=0
      CASE "0"
        INPUT "内容：",V$: IF V$<>"" THEN MSTR=V$
      CASE "1"
        INPUT "字符宽度（px）：",V$: IF V$<>"" THEN W=VAL(V$)
      CASE "2"
        INPUT "字符高度（px）：",V$: IF V$<>"" THEN H=VAL(V$)
      CASE "3"
        INPUT "西文字体（0-10）：",V$: IF V$<>"" THEN FASC=VAL(V$)
      CASE "4"
        INPUT "中文字体（0-33）：",V$: IF V$<>"" THEN FHZK=VAL(V$)
      CASE "5"
        INPUT "字符属性：",V$: IF V$<>"" THEN ATTR=VAL(V$)
      CASE "6"
        INPUT "字距调整（px）：",V$: IF V$<>"" THEN XADJ=VAL(V$)
    END SELECT
  LOOP UNTIL (RUNNING=0)
END SUB

SUB MeasureAndDrawStr(STR AS STRING, RES AS INTEGER, W AS INTEGER, H AS INTEGER, FONTASC AS INTEGER, FONTHZK AS INTEGER, ATTR AS INTEGER, DIST AS INTEGER)
  I=0: L=LEN(STR): FONT=0: RES=0
  WHILE I<L
    CH$=MID$(STR,I+1,1): FONT=FONTASC: WA=W
    IF ASC(CH$)>=&H80 THEN
      I=I+1: CH$=CH$+MID$(STR,I+1,1): FONT=FONTHZK
    END IF
    CALL GetChar(CH$,FONT,WA,H,ATTR)
    CALL DrawChar(WA,H,RES,128,15)
    DX=WA+DIST: IF DX>0 THEN RES=RES+DX
    I=I+1
  WEND
END SUB
SUB GetChar(STR AS STRING,FONT AS INTEGER,W AS INTEGER,H AS INTEGER,ATTR AS INTEGER)
    STATIC Param AS FontDataT
    IF ASC(MID$(STR,1,1)) < &H80 THEN
        Param.CH0=STR: Param.CH1=CHR$(0)
        Param.W=W
    ELSE
        Param.CH0=MID$(STR,2,1): Param.CH1=MID$(STR,1,1)
        Param.W=W*2
    END IF
    Param.FONT=FONT: Param.H=H
    Param.TOP=0: Param.BOTTOM=H-1
    Param.ATTR=ATTR: Param.BUFLEN=16384
    REGS.DS=VARSEG(Param): REGS.ES=VARSEG(BITMAP(0))
    REGS.SI=VARPTR(Param): REGS.DI=VARPTR(BITMAP(0))
    CALL INTX(&H7E,REGS)
    W=Param.W
END SUB
SUB DrawChar(W AS INTEGER, H AS INTEGER, X AS INTEGER, Y AS INTEGER, C AS INTEGER)
    STATIC Param AS DrawBitmapT
    Param.W=W: Param.H=H: Param.X=X: Param.Y=Y: Param.C=CHR$(C)
    DS=VARSEG(Param): ES=VARSEG(BITMAP(0))
    SI=VARPTR(Param): DI=VARPTR(BITMAP(0))
    DEF SEG=VARSEG(SI): SI0=PEEK(VARPTR(SI)): SI1=PEEK(VARPTR(SI)+1)
    DEF SEG=VARSEG(DI): DI0=PEEK(VARPTR(DI)): DI1=PEEK(VARPTR(DI)+1)
    DEF SEG=VARSEG(DS): DS0=PEEK(VARPTR(DS)): DS1=PEEK(VARPTR(DS)+1)
    DEF SEG=VARSEG(ES): ES0=PEEK(VARPTR(ES)): ES1=PEEK(VARPTR(ES)+1)
    DEF SEG=VARSEG(ASMDRAW(0)): OFFSET=VARPTR(ASMDRAW(0))
    POKE OFFSET+6, SI0: POKE OFFSET+7, SI1
    POKE OFFSET+9, DS0: POKE OFFSET+10, DS1
    POKE OFFSET+14, DI0: POKE OFFSET+15, DI1
    POKE OFFSET+17, ES0: POKE OFFSET+18, ES1
    CALL ABSOLUTE(OFFSET)
    DEF SEG
END SUB

SUB INTX (N AS INTEGER, REGS AS REGSTYPE)
  STATIC DS AS INTEGER,SI AS INTEGER,P AS INTEGER
  DS=VARSEG(REGS):SI=VARPTR(REGS)
  DEF SEG=VARSEG(DS):P=VARPTR(DS):DS0=PEEK(P): DS1=PEEK(P+1)
  DEF SEG=VARSEG(SI):P=VARPTR(SI):SI0=PEEK(P): SI1=PEEK(P+1)
  DEF SEG=VARSEG(ASMINTX(0)): P=VARPTR(ASMINTX(0))
  POKE P+&H2E,N
  POKE P+&HA,SI0:POKE P+&HB,SI1
  POKE P+&HD,DS0:POKE P+&HE,DS1
  CALL ABSOLUTE(P)
  DEF SEG
END SUB

SUB INITENV()
  DEF SEG = VARSEG(ASMINTX(0)): P = VARPTR(ASMINTX(0))
  FOR I = 0 TO 92: READ V: POKE P, V: P = P + 1: NEXT I
  DEF SEG = VARSEG(ASMDRAW(0)): P = VARPTR(ASMDRAW(0))
  FOR I = 0 TO 87: READ V: POKE P, V: P = P + 1: NEXT I
  DEF SEG
  REGS.AX=&HDB00:CALL INTX(&H2F,REGS)
  IF (REGS.AX AND 255)<>255 OR REGS.BX<>&H5450 THEN
    PRINT "Please run UCDOS first.":END
  END IF
  REGS.AX=1:CALL INTX(&H79,REGS)
  IF (REGS.FLAGS AND &H40)=0 THEN
    PRINT "Please run RDFNT first.": END
  END IF
END SUB

